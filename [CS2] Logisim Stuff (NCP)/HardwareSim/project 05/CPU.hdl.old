// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Central Processing unit (CPU).
 * Consists of an ALU and a set of registers, designed to fetch and 
 * execute instructions written in the Hack machine language.
 * In particular, the ALU executes the inputted instruction according
 * to the Hack machine language specification, as follows. 
 * The D and A in the language specification refer to CPU-resident registers,
 * while M refers to the memory register addressed by A, i.e. to Memory[A].
 * The inM input holds the value of this register. If the current instruction 
 * needs to write a value to M, the value is placed in outM, the address 
 * of the target register is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM=0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time unit. If reset == 1, then the 
 * CPU jumps to address 0 (i.e. sets pc = 0 in next time unit) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current program
                         // (reset == 1) or continue executing the current
                         // program (reset == 0).

    OUT outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // RAM address (of M)
        pc[15];          // ROM address (of next instruction)

     PARTS:
    // Put your code here.
	
//A Register
	ARegister(in = AregIN, load = instruction[5], out = AregOUT, out[0..14] = addressM);
	
//D Register
	DRegister(in = ALUout, load = instruction[4], out = DregOUT);
	
//Decoder
	//[0] = i
	//[1..2] = x
	//[3] = a
	//[4..9] = c
	//[10..12] = d
	//[13..15] = j
	
	//[15] = i
	//[14..13] = x
	//[12] = a
	//[11..6] = c
	//[5..3] = d
	//[2..0] = j
	
//Comparer
	Or(a = ng, b = zr, out = or1);
	Not(in = or1, out = notor1);
	And(a = notor1, b = instruction[0], out = JUMP1);
	
	And(a = zr, b = instruction[1], out = JUMP2);
	
	And(a = instruction[2], b = ng, out = JUMP3);
	
	Or(a = JUMP1, b = JUMP2, out = jmp1);
	Or(a = JUMP2, b = JUMP3, out = jmp2);
	
	Or(a = jmp1, b = jmp2, out = loadout);
	Not(in = loadout, out = notloadout);
	
//ALU
	ALU(x = DregOUT, y = AM,
	zx= instruction[11], 
	nx= instruction[10],
	zy= instruction[9],
	ny= instruction[8],
	f = instruction[7], 
	no = instruction[6],
	zr= zr,
	ng= ng,
	out = outM, out = ALUout);
	
//PC
	PC(in = AregOUT, load = loadout, inc = notloadout, reset = reset, out[0..14] = pc);
	
//Other Stuff
	Mux16(a = ALUout, b = instruction, sel = instruction[15], out = AregIN);
	Mux16(a = AregOUT, b = inM, sel = instruction[12], out = AM);
	
	
	
}
